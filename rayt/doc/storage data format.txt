Octree file contains the following:
1) Octree header.
    a) 4 bytes - number of nodes in block.
    b) 4 bytes - b - number of blocks.
    c) 4 bytes - index of root block (the index of root node within this block can be found in block header).
    d) 4 bytes - q - number of bytes in each block record.
    e) 4 bytes - n - number of channels.
    f) n channel records. The first channel must be named "node links" and must have number of bytes in node = 4.
        - 4 bytes - number of bytes in node.
        - 4 bytes - l - name length.
        - l bytes - name ASCII characters.
2) b octree block records (specification follows).

Stored octree block contains the following:
1) Block header.
    a) 4 bytes - this block index. This field is redundant.
    b) 4 bytes - parent block index. kRootBlockParent if this block is root. This field is redundant.
    c) 4 bytes - n - number of roots of this block. 1 <= n <= 8.
    d) 8 root records. Only first n records are valid.
        - 2 bytes - index of pointer in parent block. Ignored if this block is root. Note that this pointer may or may not be a fault.
        - 2 bytes - index of pointed node in this block.
        - 4 bytes - parent pointer value (when this block is not loaded). Redundant but needed to remove block from cache without reading parent block.
2) Concatenated data for all channels. Child pointers are stored in the following way. Let c be some 24-bit child pointer, t = c&1, p = c>>1. If t == 0, p is the child index within this block. If t == 1, p is the index of the block containing children; the index of child within this block can be found in that block header. Data for non-existing nodes (nodes that have no incoming links) is filled with zeroes.
3) 0 or more bytes of padding, so that the record size is equal to q.
